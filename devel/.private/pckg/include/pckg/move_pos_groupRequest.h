// Generated by gencpp from file pckg/move_pos_groupRequest.msg
// DO NOT EDIT!


#ifndef PCKG_MESSAGE_MOVE_POS_GROUPREQUEST_H
#define PCKG_MESSAGE_MOVE_POS_GROUPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pckg
{
template <class ContainerAllocator>
struct move_pos_groupRequest_
{
  typedef move_pos_groupRequest_<ContainerAllocator> Type;

  move_pos_groupRequest_()
    : pos()  {
    }
  move_pos_groupRequest_(const ContainerAllocator& _alloc)
    : pos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::pckg::move_pos_groupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pckg::move_pos_groupRequest_<ContainerAllocator> const> ConstPtr;

}; // struct move_pos_groupRequest_

typedef ::pckg::move_pos_groupRequest_<std::allocator<void> > move_pos_groupRequest;

typedef boost::shared_ptr< ::pckg::move_pos_groupRequest > move_pos_groupRequestPtr;
typedef boost::shared_ptr< ::pckg::move_pos_groupRequest const> move_pos_groupRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pckg::move_pos_groupRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pckg::move_pos_groupRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pckg::move_pos_groupRequest_<ContainerAllocator1> & lhs, const ::pckg::move_pos_groupRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pckg::move_pos_groupRequest_<ContainerAllocator1> & lhs, const ::pckg::move_pos_groupRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pckg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pckg::move_pos_groupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pckg::move_pos_groupRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pckg::move_pos_groupRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2749d18f524a3c458d1f1fba1146eae0";
  }

  static const char* value(const ::pckg::move_pos_groupRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2749d18f524a3c45ULL;
  static const uint64_t static_value2 = 0x8d1f1fba1146eae0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pckg/move_pos_groupRequest";
  }

  static const char* value(const ::pckg::move_pos_groupRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] pos\n"
;
  }

  static const char* value(const ::pckg::move_pos_groupRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_pos_groupRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pckg::move_pos_groupRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pckg::move_pos_groupRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCKG_MESSAGE_MOVE_POS_GROUPREQUEST_H
