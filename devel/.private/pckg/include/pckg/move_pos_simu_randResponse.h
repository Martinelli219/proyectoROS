// Generated by gencpp from file pckg/move_pos_simu_randResponse.msg
// DO NOT EDIT!


#ifndef PCKG_MESSAGE_MOVE_POS_SIMU_RANDRESPONSE_H
#define PCKG_MESSAGE_MOVE_POS_SIMU_RANDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pckg
{
template <class ContainerAllocator>
struct move_pos_simu_randResponse_
{
  typedef move_pos_simu_randResponse_<ContainerAllocator> Type;

  move_pos_simu_randResponse_()
    : ret(false)  {
    }
  move_pos_simu_randResponse_(const ContainerAllocator& _alloc)
    : ret(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ret_type;
  _ret_type ret;





  typedef boost::shared_ptr< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> const> ConstPtr;

}; // struct move_pos_simu_randResponse_

typedef ::pckg::move_pos_simu_randResponse_<std::allocator<void> > move_pos_simu_randResponse;

typedef boost::shared_ptr< ::pckg::move_pos_simu_randResponse > move_pos_simu_randResponsePtr;
typedef boost::shared_ptr< ::pckg::move_pos_simu_randResponse const> move_pos_simu_randResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pckg::move_pos_simu_randResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pckg::move_pos_simu_randResponse_<ContainerAllocator1> & lhs, const ::pckg::move_pos_simu_randResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ret == rhs.ret;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pckg::move_pos_simu_randResponse_<ContainerAllocator1> & lhs, const ::pckg::move_pos_simu_randResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pckg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2cc9e9d8c464550830df49c160979ad";
  }

  static const char* value(const ::pckg::move_pos_simu_randResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2cc9e9d8c464550ULL;
  static const uint64_t static_value2 = 0x830df49c160979adULL;
};

template<class ContainerAllocator>
struct DataType< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pckg/move_pos_simu_randResponse";
  }

  static const char* value(const ::pckg::move_pos_simu_randResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ret\n"
"\n"
;
  }

  static const char* value(const ::pckg::move_pos_simu_randResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ret);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_pos_simu_randResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pckg::move_pos_simu_randResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pckg::move_pos_simu_randResponse_<ContainerAllocator>& v)
  {
    s << indent << "ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ret);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCKG_MESSAGE_MOVE_POS_SIMU_RANDRESPONSE_H
