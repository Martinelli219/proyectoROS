// Generated by gencpp from file pckg/move_pos_singleRequest.msg
// DO NOT EDIT!


#ifndef PCKG_MESSAGE_MOVE_POS_SINGLEREQUEST_H
#define PCKG_MESSAGE_MOVE_POS_SINGLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pckg
{
template <class ContainerAllocator>
struct move_pos_singleRequest_
{
  typedef move_pos_singleRequest_<ContainerAllocator> Type;

  move_pos_singleRequest_()
    : name_motor()
    , pos(0.0)  {
    }
  move_pos_singleRequest_(const ContainerAllocator& _alloc)
    : name_motor(_alloc)
    , pos(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_motor_type;
  _name_motor_type name_motor;

   typedef float _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::pckg::move_pos_singleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pckg::move_pos_singleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct move_pos_singleRequest_

typedef ::pckg::move_pos_singleRequest_<std::allocator<void> > move_pos_singleRequest;

typedef boost::shared_ptr< ::pckg::move_pos_singleRequest > move_pos_singleRequestPtr;
typedef boost::shared_ptr< ::pckg::move_pos_singleRequest const> move_pos_singleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pckg::move_pos_singleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pckg::move_pos_singleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pckg::move_pos_singleRequest_<ContainerAllocator1> & lhs, const ::pckg::move_pos_singleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name_motor == rhs.name_motor &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pckg::move_pos_singleRequest_<ContainerAllocator1> & lhs, const ::pckg::move_pos_singleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pckg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pckg::move_pos_singleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pckg::move_pos_singleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pckg::move_pos_singleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "150379f0226f3135206872b0c794909d";
  }

  static const char* value(const ::pckg::move_pos_singleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x150379f0226f3135ULL;
  static const uint64_t static_value2 = 0x206872b0c794909dULL;
};

template<class ContainerAllocator>
struct DataType< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pckg/move_pos_singleRequest";
  }

  static const char* value(const ::pckg::move_pos_singleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name_motor\n"
"float32 pos\n"
;
  }

  static const char* value(const ::pckg::move_pos_singleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name_motor);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_pos_singleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pckg::move_pos_singleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pckg::move_pos_singleRequest_<ContainerAllocator>& v)
  {
    s << indent << "name_motor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name_motor);
    s << indent << "pos: ";
    Printer<float>::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCKG_MESSAGE_MOVE_POS_SINGLEREQUEST_H
